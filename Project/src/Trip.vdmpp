class Trip
types
-- TODO Define types here
	public Segment :: startCity : Utilities`String
								 		--destinationCity : Utilities`String
								 		timeDuration: real
								 		distance: real
								 		price: real
								 		meanOfTransport: Connection`Type
								 		seatsAvailable: nat

instance variables
	protected segments : seq of Segment;
	protected finalResults : seq of real;
	protected availableSeatsForTrip : nat;
		
operations
	
	-- constructor
	public Trip: seq of Segment ==> Trip
	Trip(segs) ==
	(
		segments := segs;
		finalResults := [];
		return self;
	)
	post segments = segs and finalResults = [];
	
	-- add new segment
	public addSegment: Utilities`String * seq of real * Connection`Type * nat ==> ()
	addSegment(origin, distValues, meanType, seatsAvailable) ==
	(
		dcl segment : Segment := mk_Segment(origin, distValues(3), distValues(1), distValues(2), meanType, seatsAvailable);
		segments := segments ^[segment]; 
	);
	
	-- add new segment withouy mean of transportation info
	public addSegmentFirst: Utilities`String * seq of real  * nat ==> ()
	addSegmentFirst(origin, distValues, seatsAvailable) ==
	(
		dcl segment : Segment := mk_Segment(origin, distValues(3), distValues(1), distValues(2), <NONE>, seatsAvailable);
		segments := segments ^[segment]; 
	);
	
	-- get segments
	public getSegments: () ==> seq of Segment
	getSegments() ==
	(
		return segments;
	);
	
	-- set final results
	public setFinalResults : seq of real ==> ()
	setFinalResults(results) ==
	(
		finalResults := results;
	)
	post finalResults = results;   

	-- gets number of seats available per trip
	public getAvailableSeats: () ==> nat
	getAvailableSeats() ==
	(
	  dcl minSeatsAvailable : nat;
	  minSeatsAvailable := Utilities`MAX_INT;
		for idx = 1 to len segments do (
			if (segments(idx).seatsAvailable <= minSeatsAvailable) then
				minSeatsAvailable := segments(idx).seatsAvailable;
		);
		return minSeatsAvailable;
	);
	
	public totalPrice:() ==> real
	totalPrice() ==
	(
		return finalResults(2);
	);

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Trip