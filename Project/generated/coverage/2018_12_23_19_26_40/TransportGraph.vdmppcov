class TransportGraph

types
	public Type = Connection`Type;
	
instance variables
	private stations : set of Utilities`Station;
	private connections: set of Connection;

operations
	-- Constructor
	public TransportGraph:() ==> TransportGraph
	TransportGraph() ==
	(
		stations := {};
		connections := {};
		createDatabase();
	);
	
	
	private addConnection: Type * Utilities`String * Utilities`String * real * seq of nat ==> ()
	addConnection(t, s, d, dist, ttbl) ==
		(dcl tempConnection: Connection;
			dcl originStation : Utilities`Station := mk_Utilities`Station(s, false, 0);
			dcl destinationStation : Utilities`Station := mk_Utilities`Station(d, false, 0);
			
			tempConnection := new Connection(t, originStation, destinationStation, dist, ttbl);
			connections := connections union {tempConnection};
			
			stations := stations union {originStation, destinationStation};
			);
		
	public createDatabase: () ==> ()
		createDatabase() ==
		(
			addConnection(<Bus>,   "Porto", "Lisbon", 300, [690, 720]);
			addConnection(<Plane>, "Amsterdam", "Bologna", 300, [60, 720]);
			addConnection(<Plane>, "Bologna", "Paris", 2900, [30, 721]);
			addConnection(<Bus>,   "Macedo de Cavaleiros", "Porto", 350, [10, 12, 20]);
			addConnection(<Plane>, "Porto", "Lisbon", 300, [8, 22]);
			addConnection(<Train>, "Porto", "Lisbon", 350, [10, 12, 16, 20, 22]);
			addConnection(<Train>, "Lisbon", "Faro", 280, [9, 11, 15, 19]);
			addConnection(<Plane>, "Lisbon", "Faro", 250, [8, 12, 20]);
			addConnection(<Bus>,   "Lisbon", "Faro", 285, [8, 12]);
			addConnection(<Plane>, "Lisbon", "Madrid", 650, [8, 10, 12, 15, 19, 22]);
			addConnection(<Train>, "Lisbon", "Madrid", 680, [8, 10, 12, 15, 17, 19, 22]);
			addConnection(<Plane>, "Lisbon", "Barcelona", 1247, [8, 12, 15, 19, 22]);
			addConnection(<Train>, "Madrid", "Barcelona", 625, [8, 10, 12, 15, 17, 19, 22]);
			addConnection(<Plane>, "Madrid", "Barcelona", 625, [8, 12, 15, 19, 22]);
			-- TODO add more connections
		);	
		
	public listConnections: () ==> set of Connection 
		listConnections() == return connections;
		
	public stringEqual: Utilities`String * Utilities`String ==> bool
	stringEqual(s1, s2) ==
	(
	 if len s1 <> len s2 then
	 	return false;
	 for idx = 1 to len s1 do
	 	if s1(idx) <> s2(idx) then return false;
	 
	 return true;
	);
	
	public getConnectionsWithSource: Utilities`String ==> set of Connection
	getConnectionsWithSource(s) ==
	(dcl result: set of Connection;
	 result := {};
		for all e in set connections do
		(
			if stringEqual(e.source.name, s) then result := result union {e}; 
		);
		return result;
	);
	
	public getConnectionsWithDestination: Utilities`String ==> set of Connection
	getConnectionsWithDestination(d) ==
	(dcl result: set of Connection;
	 result := {};
		for all e in set connections do
		(
			if stringEqual(e.destination.name, d) then result := result union {e}; 
		);
		return result;
	);
	
	public getStation: Utilities`String ==> Utilities`Station
	getStation(stationName) ==
	(
		dcl stationRes : Utilities`Station;
		for all station in set stations do (
			if stringEqual(station.name, stationName) then stationRes := station;
		); 
		return stationRes;
	);
	
functions

traces

end TransportGraph