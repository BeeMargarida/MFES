class SearchEngine
types
	public Type = Connection`Type;
	public ConnectionInfo :: con  : seq of Connection
													 type : Type
													 weight: real									 
instance variables

	protected transportMap: TransportGraph;
	protected settledNodes: set of Station := {};
	protected unsettledNodes: set of Station := {};
	protected distances: map Station to seq of real := {|->}; -- seq of reals --> 1: distance; 2: price; 3: duration 
	protected prev: map Station to Station := {|->};
	protected stationOrigin : Station;
	protected minimumNode : Station;
	protected trips : seq of Trip := [];
	
	inv visitedImpliesConnected(settledNodes, unsettledNodes, transportMap);

operations
	-- constructor
	public SearchEngine: TransportGraph ==> SearchEngine
	SearchEngine(t) ==
	(
		transportMap := t;
		unsettledNodes := transportMap.listStations(); 
		return self;
	);
	
	public getTransportGraph: () ==> TransportGraph
	getTransportGraph() == return transportMap;
	
	-- dijkstra algorithm logic and main function
	public dijkstraAlgorithm: Station * set of Connection`Type * nat ==> ()
	dijkstraAlgorithm(origin, meansOfTransportation, weightFactor) ==
	(
		
		distances := distances ++ {origin |-> [0,0,0]};
		origin.setArrivalTime(0);
		
		settledNodes := settledNodes union {origin};
		
		while(settledNodes inter unsettledNodes <> {}) do (
		
			dcl minimumNode : Station := getMinimumNode(weightFactor);
			settledNodes := settledNodes union {minimumNode};
			unsettledNodes := unsettledNodes\{minimumNode};
			
			findMinimalDistances(minimumNode, meansOfTransportation, weightFactor);
		
		);
	)
	pre (weightFactor = 1 or weightFactor = 2 or weightFactor = 3) and validGraph(transportMap) and validStart(stationOrigin, transportMap)
	post IsShortestPath(distances, prev, settledNodes, stationOrigin, transportMap, meansOfTransportation, weightFactor);

	
	-- returns the minimum waiting time when we change transportation in one station or -1, if the
	-- connecton is not possible regarding the schedule 
	private getWaitingTime: Station * Station * Type ==> real
	getWaitingTime(targetNode, intermediateNode, conType) == (
		dcl intermediateConnections : set of Connection;
		dcl timeDiff : real;
		dcl minDiff : real;
		
		minDiff := Utilities`MAX_INT;
		intermediateConnections := transportMap.getConnectionsWithSource(intermediateNode.name) inter
															 transportMap.getConnectionsWithDestination(targetNode.name);
		
		for all availableConnection in set intermediateConnections do (
			if(availableConnection.type = conType) then (
				for idx = 1 to len availableConnection.timetable do (
					timeDiff := availableConnection.timetable(idx) - intermediateNode.arrivalTime;
					if (timeDiff >= 0 and timeDiff < minDiff) then (
						minDiff := timeDiff;
					);
				);
			);
		);
		
		if (minDiff = Utilities`MAX_INT) then
			return -1;
			
		return minDiff;
	);
	

	-- from all possible connections between startNode and targetNode,
	-- return the duration of the shortest one 
	private findMinDuration: set of Connection ==> real
	findMinDuration(connectionsSet) ==
	(
		dcl minDuration : real;
		
		minDuration := Utilities`MAX_INT;
		for all c in set connectionsSet do (
			if c.duration <= minDuration then (
				minDuration := c.duration;
			);
		);
		return minDuration;
	);
	
	-- gets the arrivalTime in targetNode from startNode on the shortest route regarding distance 
	private getArrivalTime: real * Station * Station * set of Type * bool ==> real
	getArrivalTime(startTime, startNode, targetNode, meansOfTransportation, selectedMean) ==
	(
		dcl validConnections : set of Connection;
		dcl connectionsFromSource : set of Connection;
		dcl minArrivalTime : real;
		
		validConnections := {};
		connectionsFromSource := transportMap.getConnectionsWithSource(startNode.name);
		
		for all c in set connectionsFromSource do (
			if (stringEqual(c.destination.name, targetNode.name)) then ( -- if they are connections to target node 
				if (selectedMean = true) then (
					 if c.type in set meansOfTransportation then (
					 	validConnections := validConnections union {c};
					 );
				) else (
					validConnections := validConnections union {c};
				);
			);
		);
		
		minArrivalTime := startTime + startNode.arrivalTime + findMinDuration(validConnections);
		
		return minArrivalTime;
	);
	
	private waitingTime: Connection * Station ==> real
	waitingTime(connection, node) ==
	(
		dcl timeDiff : real;
		dcl minDiff : real;
		
		minDiff := Utilities`MAX_INT;
		for idx = 1 to len connection.timetable do (
			timeDiff := connection.timetable(idx) - node.arrivalTime;
			if (timeDiff >= 0 and timeDiff < minDiff) then (
				minDiff := timeDiff;
			);
		);
		
		return minDiff;
	);
	
	-- function that goes through all the nodes and their neighbours, to get the minimum distances to each of them
	private findMinimalDistances: Station * set of Connection`Type * nat ==> () 
	findMinimalDistances(node, meansOfTransportation, weightFactor) ==
	(
		dcl adjacentNodes: set of Station := transportMap.getNeighborsOfNode(node.name);
		dcl neighborArrivalTime : real;
		dcl startTime : real := 0;
		dcl hasMean : bool := false;
		
		if(meansOfTransportation <> {}) then
				hasMean := true;
				
		-- Compute arrivalTime for all neighbors of the source node
		for all neighbor in set adjacentNodes do (
			neighborArrivalTime := getArrivalTime(0, node, neighbor, meansOfTransportation, hasMean);
			neighbor.setArrivalTime(neighborArrivalTime);
		);

		for all target in set adjacentNodes do (
		
			dcl cons : set of ConnectionInfo := getDistanceConnection(node, target, meansOfTransportation, weightFactor);
			for all con in set cons do (
				if(con.con <> []) then (
				
					if(getShortestDistance(target, weightFactor) > getShortestDistance(node, weightFactor) + con.weight) then (
						--dcl newArrivalTime : real := getArrivalTime(startTime, node, target, meansOfTransportation, false);
						dcl newArrivalTime : real;
						if (waitingTime(con.con(1), node) >= 0) then (
							
							dcl newPrice : real;
							dcl newDist : real;
							dcl newDuration : real;
							dcl newSeq : seq of real := [];
							
							newArrivalTime := startTime + node.arrivalTime + getDistanceFromConnection(con.con(1), 3) + waitingTime(con.con(1), node);
						
							newDist := getShortestDistance(node, 1) + getDistanceFromConnection(con.con(1), 1); 
							newPrice := getShortestDistance(node, 2) + getDistanceFromConnection(con.con(1), 2); 
							newDuration := getShortestDistance(node, 3) + getDistanceFromConnection(con.con(1), 3);
						
							newSeq := [newDist,newPrice,newDuration];
							
							distances := distances ++ {target |-> newSeq};
							target.setCalculatedVariables(newSeq);
							target.setArrivalTime(newArrivalTime);
							target.setMeanOfTransportationUsed(con.type);
							prev := prev ++ {target |-> node};
							
							settledNodes := settledNodes union {target}; 
							
						);
					);
				);
			);
		);
	)
	pre weightFactor = 1 or weightFactor = 2 or weightFactor = 3;
	
	-- get node that hasn't been visited with the minimum weight factor
	private getMinimumNode: nat ==> Station 
	getMinimumNode(weightFactor) == 
	(
		minimumNode := new Station("");
		for all n in set settledNodes inter unsettledNodes do (
			if(minimumNode.name = "") then (
				minimumNode := n;
			)
			else (
				if(getShortestDistance(n, weightFactor) < getShortestDistance(minimumNode, weightFactor)) then (
					minimumNode := n;
				); 
			);
		);
		
		return minimumNode;
	)
	pre weightFactor = 1 or weightFactor = 2 or weightFactor = 3
	post isMinimumNode(weightFactor, distances, minimumNode, transportMap, settledNodes, unsettledNodes);
	
	-- returns the minimum distance (or price or duration) in the distance seq
	private getShortestDistance: Station * nat ==> real 
	getShortestDistance(destination, weightFactor) == 
	(
		dcl d: map Station to seq of real := {destination} <: distances;
		dcl d1 : set of seq of real := rng d;
		dcl dist : seq of real := getFirstFromSet(d1);
		
		return dist(weightFactor);
	);
	
	-- returns info about the connection from one node to another, if the connection is with the correct mean of transporation and if
	-- the origin and destination are correct
	private getDistanceConnection: Station * Station * set of Connection`Type * nat ==> set of ConnectionInfo
	getDistanceConnection(node, target, meansOfTransportation, weightFactor) ==
	(
		dcl conTmp : Connection;
		dcl connectionInfo : set of ConnectionInfo := {};
		
		for all con in set transportMap.listConnections() do (		
			if(con.type in set meansOfTransportation) then (
			
				if(stringEqual(con.source.name,node.name) and stringEqual(con.destination.name, target.name)) then (
					
					if(weightFactor = 1) then (
						connectionInfo := connectionInfo union {mk_ConnectionInfo([con], con.type, con.distance)};
					) 
					else if (weightFactor = 2) then (
						connectionInfo := connectionInfo union {mk_ConnectionInfo([con], con.type, con.price)};
					)
					else if (weightFactor = 3) then (
						connectionInfo := connectionInfo union {mk_ConnectionInfo([con], con.type, con.duration)};
					);
				);
			);
		);
		
		return connectionInfo;
		
	);
	
	-- get distance (or price or duration) from one connection
	private getDistanceFromConnection: Connection * nat ==> real
	getDistanceFromConnection(con, weightFactor) ==
	(
		dcl ret : real := 0;
		if(weightFactor = 1) then (
			ret := con.distance;
		) 
		else if (weightFactor = 2) then (
			ret := con.price;
		)
		else if (weightFactor = 3) then (
			ret := con.duration;
		);
		
		return ret;
	)
	pre weightFactor = 1 or weightFactor = 2 or weightFactor = 3;
	
	-- return first element of a set 
	private getFirstFromSet: set of seq of real ==> seq of real
	getFirstFromSet(reals) == 
	(
		if(reals <> {}) then (
			for all ds in set reals do return ds;
		)
		else return [1000000, 1000000, 1000000];
	);
	
	---------------------------------------------------------------------------------------------
	 
	-- Returns seq of nodes from origin to destination
	public getPath: Utilities`String ==> seq of Station
	getPath(destination) ==
	(	
		dcl path : seq of Station := [];
		dcl revertedPath: seq of Station := [];
		
		dcl stationDest : Station := transportMap.getStation(destination);
		
		dcl tmp : map Station to Station := {stationDest} <: prev;
		dcl tmp2 : set of Station := rng tmp;
		
		if (tmp2 = {}) then (
			return [];
		);
		
		path := path ^ [stationDest];
		
		while (tmp2 <> {}) do (
			
			stationDest := prev(stationDest);
			path := path ^ [stationDest];
			
			tmp := {stationDest} <: prev;
			tmp2 := rng tmp;
		);
		
		revertedPath := revertSeq(path);
		
		return revertedPath;
	);
	
	-- reverts the order of the sequence
	private revertSeq: seq of Station ==> seq of Station
	revertSeq(stations) ==
	(
		dcl result : seq of Station := stations;
		dcl i : nat := 0;
		
		for sta in stations do (
			 result(len stations - i) := sta;
			 i := i + 1;  
		);
		
		return result;
	);
	
	/*
		HOW TO RUN:
		create t := new TransportGraph()
		create s := new SearchEngine(t)
		create trips := s.rome2Rio(['P','o','r','t','o'], ['M','a','d','r','i','d'], {1,2}, 2, -1)
		
		print s.rome2Rio(['P','o','r','t','o'], ['M','a','d','r','i','d'], {1,2}, 2, -1)
		print s.rome2Rio(['P','o','r','t','o'], ['F','a','r','o'], {1,2}, 2, -1)
		print s.rome2Rio(['P','o','r','t','o'], ['B','a','r','c','e','l','o','n','a'], {1,2}, 2, -1)
		
		SPECIFIC FUNCTIONS: 
		print s.dijkstraAlgorithm(['P','o','r','t','o'], 2)
		print s.getPath(['M','a','d','r','i','d'])
		print s.getPath(['B','a','r','c','e','l','o','n','a'])
		
	*/
	
	-- checks if the user input was with no means of transportation selected or not, if not, calculates all combinations and runs dijkstra algorithm and
	-- and gets the shortest path for each combination.
	-- If a combination was provided by the user, the dijkstra algorithm is run and the shortest path related to the weightFactor and with the means of 
	-- transportation selected is returned
	public rome2Rio: Utilities`String * Utilities`String * set of nat * nat * real ==> seq of Trip 
	rome2Rio(origin, destination, meansOfTransportation, weightFactor, maxDuration) ==
	(
		dcl stationDest : Station := transportMap.getStation(destination);
		trips := [];
		
		if(stringEqual(stationDest.name, "Error")) then (
				IO`println("There is no destination station with that name.");
				return [];
		);
		stationOrigin := transportMap.getStation(origin);
		if(stringEqual(stationOrigin.name, "Error")) then (
				IO`println("There is no origin station with that name.");
				return [];
		);
		
		prev := {|->};
		distances := {|->};
		unsettledNodes := transportMap.listStations();
		settledNodes := {};
	
		if(meansOfTransportation = {}) then (
			
			dcl answerOne : seq of Station := [];
			dcl means : set of set of Connection`Type := {
				{<Bus>},{<Plane>},{<Train>},{<Walk>},{<Bus>,<Plane>},{<Bus>,<Train>},{<Bus>,<Walk>},{<Plane>,<Train>},{<Plane>,<Walk>},
				{<Train>,<Walk>},{<Bus>,<Train>,<Walk>},{<Bus>,<Train>,<Plane>},{<Plane>,<Train>,<Walk>},{<Bus>,<Plane>,<Walk>},{<Bus>,<Plane>,<Train>,<Walk>}
			};
			
			for all mean in set means do (
				
				dcl trip : Trip := new Trip([]);
				prev := {|->};
				distances := {|->};
				unsettledNodes := transportMap.listStations();
				settledNodes := {};
				answerOne := [];
								
				
				dijkstraAlgorithm(stationOrigin, mean, weightFactor);
				answerOne := getPath(destination);
				
				IO`println(mean);
				IO`println("\n\n");
				
				if(prev <> {|->} and stationDest.getCalculatedVariables()(1) <> 0 
					and stationDest.getCalculatedVariables()(2) <> 0 and stationDest.getCalculatedVariables()(3) <> 0 
					and (maxDuration < 0 or stationDest.arrivalTime <= maxDuration)) then (
				
					dcl i : nat := 0;
					dcl prevStation : Station;
					for el in answerOne do (
						
						IO`println(el);
						if(i = 0) then trip.addSegmentFirst(el.name, el.getCalculatedVariables(), 0)
						else trip.addSegment(el.name, el.getCalculatedVariables(), el.getMeanOfTransportationUsed(), el.getAvailableSeats(transportMap.listConnections(), prevStation));
						
						prevStation := el;
						i := i + 1;

					);
					IO`println("\n\n");
					
					if(trip.getSegments() <> []) then (
						trip.setFinalResults(stationDest.getCalculatedVariables(), stationDest.arrivalTime);
						if(trips = []) then (
								trips := trips ^ [trip];)
						else (
								dcl isIn : bool := false;
								for t in trips do (
										if(equalTrips(t, trip) = true) then
												isIn := true;
								);
								if( isIn = false ) then
										trips := trips ^ [trip];
						);
					);
				);
				
			);
			
			if(trips = []) then (
					IO`println("There are no possible paths for your options.");	
			);
			
			return trips;
			
			
		) 
		else (
			
			dcl answerSeq : seq of Station := [];
			dcl trip : Trip := new Trip([]);
			dcl means : set of Connection`Type := {};
			dcl i : nat := 0;
			dcl prevStation : Station;
			
			for all m in set meansOfTransportation do(
				if( m = 1 ) then(
				means := means union {<Bus>})
				else if( m = 2 ) then(
				means := means union {<Plane>})
				else if( m = 3 ) then(
				means := means union {<Train>})
				else if( m = 4 ) then(
				means := means union {<Walk>})
			);
						
			dijkstraAlgorithm(stationOrigin, means, weightFactor);
			answerSeq := getPath(destination);
			
			for el in answerSeq do (
					-- TODO: CHANGE SEATS AVAILABLE!!!
			 		if(i = 0) then trip.addSegmentFirst(el.name, el.getCalculatedVariables(), 0)
					else trip.addSegment(el.name, el.getCalculatedVariables(), el.getMeanOfTransportationUsed(), el.getAvailableSeats(transportMap.listConnections(), prevStation));
					
					prevStation := el;
					i := i + 1;
			);
			
			if(maxDuration > 0 and stationDest.arrivalTime > maxDuration) then (
				IO`println("There is no path with the configurations given that has a smaller duration than the one given");
				return []; 
			);
				
			if(trip.getSegments() <> []) then (
			 		trip.setFinalResults(stationDest.getCalculatedVariables(), stationDest.arrivalTime);
					trips := trips ^ [trip];
			);
			
			if(trips = []) then (
					IO`println("There are no possible paths for your options.");	
			);
			
			return trips;
		);
		
	)
	pre weightFactor = 1 or weightFactor = 2 or weightFactor = 3
	post maxDuration < 0 or checkMaximumDuration(trips,maxDuration);
	
	-- checks if a string is equal
	private stringEqual: Utilities`String * Utilities`String ==> bool
	stringEqual(s1, s2) ==
	(
	 if len s1 <> len s2 then
	 	return false;
	 for idx = 1 to len s1 do
	 	if s1(idx) <> s2(idx) then return false;
	 
	 return true;
	);
	
	-- compare trips
	public equalTrips: Trip * Trip ==> bool
	equalTrips(trip1, trip2) == (
			dcl i : nat := 1;
			dcl seg2 : seq of Trip`Segment := trip2.getSegments();
			
			for s1 in trip1.getSegments() do (
					if(s1.startCity <> seg2(i).startCity or s1.timeDuration <> seg2(i).timeDuration or s1.distance <> seg2(i).distance or s1.price <> seg2(i).price or s1.meanOfTransport <> seg2(i).meanOfTransport) then
					  return false;
					i := i+1;
			);
			
			return true;
	);
	
	
functions
	
	-- checks if the graph is valid, meaning that for each connection, the distance and duration can't be equal to 0, the price is >= 0 and
	-- the destination and origins of each connection have to be stations in the transportMap
	validGraph(g : TransportGraph) res: bool ==
	(
		
		forall e in set g.connections & (e.distance <> 0 and e.price >= 0 and e.duration <> 0 and e.timetable <> [] 
		and e.source in set g.stations and e.destination in set g.stations)
		
	);
	
	-- checks if the station given as origin is a station in the transportMap
	validStart(sta : Station, g : TransportGraph) res: bool ==
	(
		sta in set g.stations
	);
	
	-- verifies if the distances are being calculated and that all stations (nodes) have at least on connection related to them
	IsShortestPath(distances : map Station to seq of real, prev: map Station to Station, settledNodes: set of Station, stationOrigin : Station, transportMap: TransportGraph, meansOfTransportation : set of Type, weightFactor: nat) res: bool ==
		definesShortestDist(distances, prev, settledNodes, stationOrigin,transportMap, meansOfTransportation, weightFactor) 
		and setOfLinkedVertices(settledNodes, stationOrigin, transportMap, meansOfTransportation);
	
	-- checks if the algorithm is doing the calculus related to the distances correctly and that the for each connection there is a prev that is
	-- the option with the shortest path related to the weightFactor
	definesShortestDist(distances : map Station to seq of real, prev: map Station to Station, settledNodes: set of Station, stationOrigin : Station, transportMap: TransportGraph, meansOfTransportation : set of Type, weightFactor: nat) res: bool ==
	(
		distances(stationOrigin) = [0,0,0] and 
		forall sta in set settledNodes\{stationOrigin} & (exists v in set settledNodes & (
			prev(sta)=v and neighbour(transportMap, sta, v, meansOfTransportation) and
			let tup in set transportMap.connections be 
			st (tup.source = v and tup.destination = sta and tup.type = sta.meanOfTransportationUsed) 
			in (distances(sta)(weightFactor) = distances(v)(weightFactor) + getConnectionWeight(tup, weightFactor))
		))
		and
		forall u1,v in set settledNodes & (neighbour(transportMap, u1, v, meansOfTransportation) => 
			let tup in set transportMap.connections 
			be st (tup.source = v and tup.destination = u1 and tup.type in set meansOfTransportation) 
			in (distances(u1)(weightFactor) <= distances(v)(weightFactor) + getConnectionWeight(tup, weightFactor)))
	);
	
	-- returns a connection weightFactor
	getConnectionWeight(connection: Connection, weightFactor: nat) res: real == getConnectionVars(connection)(weightFactor);
	-- returns the calculated variables (distance, price and duration) of a connection
	getConnectionVars(connection: Connection) res: seq of real == connection.calculatedVariables;
	
	-- verifies that all nodes are linked to another node (at least have on connection related to them)
	setOfLinkedVertices(settledNodes: set of Station, stationOrigin : Station, transportMap: TransportGraph, meansOfTransportation : set of Type) res: bool ==
	(
		forall u1 in set settledNodes\{stationOrigin} & (exists v in set settledNodes & neighbour(transportMap, u1, v, meansOfTransportation))
	);
	
	-- checks if the node (station) u is neighbour of node v (has a connection between them in which the u is destination and v is source). It takes into 
	-- account the means of transporation selected 
	neighbour(transportMap: TransportGraph, u: Station, v: Station, meansOfTransportation : set of Type) res: bool ==
		exists tup in set transportMap.connections & (tup.source = v and tup.destination = u and getConnectionVars(tup) <> [0,0,0] and tup.type in set meansOfTransportation);
	
	-- checks that the node chosen is indeed the node with the shortests weightFactor
	isMinimumNode(weightFactor : nat, distances : map Station to seq of real, minimumNode : Station, transportMap : TransportGraph, settledNodes : set of Station, unsettledNodes : set of Station) res: bool ==
	(
		dom distances = {minimumNode} 
		or
		let sta in set dom distances
		be st (sta in set settledNodes inter unsettledNodes)
		in (distances(sta)(weightFactor) >= distances(minimumNode)(weightFactor))
	);
	
	-- returns finalResults of a trip
	getFinalResults(trip : Trip) res: seq of real == trip.finalResults;
	
	-- checks if the trips don't exceed the maximum duration
	checkMaximumDuration(trips : seq of Trip, maxDuration : real) res: bool ==
	(
		trips  = [] or
		let trip in seq trips 
		in (getFinalResults(trip)(3) < maxDuration)
	);
	
	-- INVARIANTS
	-- If node (station) has been visited (not in the unsettledNodes) it means that is in the settledNodes
	visitedImpliesConnected(settledNodes : set of Station, unsettledNodes : set of Station, transportMap : TransportGraph) res: bool ==
	(
		let v = transportMap.stations\unsettledNodes in (forall u in set v & u in set settledNodes) 
	);

traces
-- TODO Define Combinatorial Test Traces here
end SearchEngine