class Connection

types
	public Type = <Plane> | <Bus> | <Train> | <Walk> | <NONE>;

values
	-- euros / km; constants; to separate in a header file later
	-- public busPrice:   real = 0.1;
	-- public trainPrice: real = 0.07;
	-- public planePrice: real = 0.06;
	-- public walkPrice:  real = 0;
	-- km / hour
	-- public busSpeed: real   = 80;
	-- public trainSpeed: real = 100;
	-- public planeSpeed: real = 760;
	-- public walkSpeed: real  = 4;
	
instance variables
	-- declarations and initializations
	public type: Type;
	public source: Station;
	public destination: Station;
	public distance: real;
	public price: real;
	public duration: real;
	public timetable : seq of real;
	
	inv source <> destination;
	inv price >= 0;
	inv distance >= 0;
	
operations
-- Constructor
	public Connection: Type * Station * Station * real * seq of real ==> Connection
	Connection(t, s, d, dist, ttbl) ==
	(
		type := t;
		source := s;
		destination := d;
		distance := dist;
		price := getPrice(t, dist);
		duration := getDuration(t, dist);
		timetable := ttbl;
		
		return self;
	);
	
	public getType: () ==> Type
	getType() ==
			return type;
		
	private getPrice: Type * real ==> real
	getPrice(t, dist) ==
	(dcl priceKm: real;
			cases t:
				<Plane> -> priceKm := 0.06,
				<Bus> -> priceKm := 0.1,
				<Train> -> priceKm := 0.07,
				<Walk> -> priceKm := 0
			end;
			
			return priceKm * dist;
	);
	
	private getDuration: Type * real ==> real
	getDuration(t, dist) ==
	(dcl speed: real;
		cases t:
				<Plane> -> speed := 760,
				<Bus> -> speed := 80,	
				<Train> -> speed := 100,
				<Walk> -> speed := 4
			end;
			return dist / speed;
	);
		
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Connection