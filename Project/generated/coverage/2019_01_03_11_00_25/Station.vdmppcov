class Station
types
values
-- TODO Define values here
instance variables
	
	public name: Utilities`String;
	public arrivalTime: real := 0;
	private calculatedVariables: seq of real := [0,0,0]; -- seq of reals --> 1: distance; 2: price; 3: duration
	public meanOfTransportationUsed: Connection`Type := <NONE>;

	inv arrivalTime >= 0;
  inv len calculatedVariables = 3;
  inv meanOfTransportationUsed = <Bus> or meanOfTransportationUsed = <Plane> or
      meanOfTransportationUsed = <Train> or meanOfTransportationUsed = <Walk> or meanOfTransportationUsed = <NONE>;
  --inv seatsAvailable >= 0;
	
operations
	
	-- constructor
	public Station: Utilities`String ==> Station
	Station(n) ==
	(
		name := n;		
		return self;
	)
	post name = n;
	
	-- sets calculated variables 
	public setCalculatedVariables: seq of real ==> ()
	setCalculatedVariables(vars) ==
	(
		calculatedVariables := vars;
	)
	post calculatedVariables = vars;
	
	-- set arrival Time
	public setArrivalTime: real ==> ()
	setArrivalTime(time) ==
	(
		arrivalTime := time;
		
	);
		
	-- get calculated variables
	public getCalculatedVariables: () ==> seq of real
	getCalculatedVariables() ==
	(
		return calculatedVariables;
	);
	
	-- sets means of transportation used to get to this station
	public setMeanOfTransportationUsed: Connection`Type ==> ()
	setMeanOfTransportationUsed(type) ==
	(
		meanOfTransportationUsed := type;
	);
	
	-- gets means of transportation used to get to this station
	public getMeanOfTransportationUsed: () ==> Connection`Type
	getMeanOfTransportationUsed() ==
	(
		return meanOfTransportationUsed;
	);

	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Station